unit BoundaryConditionUnit;
// модуль где задаются граничные условия

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, ExtCtrls, ComCtrls;

type
  TBoundaryConditionForm = class(TForm)
    Panel2: TPanel;
    PselectBoundary: TPanel;
    LselectBoundary: TLabel;
    LselectBoundarycontin: TLabel;
    EdgeComboBox: TComboBox;
    Bapply: TButton;
    TabControl1: TTabControl;
    Panel3: TPanel;
    RadioGroup1: TRadioGroup;
    GroupBox1: TGroupBox;
    Etemperature: TEdit;
    GroupBox2: TGroupBox;
    RadioGroup2: TRadioGroup;
    Panel4: TPanel;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Exvel: TEdit;
    Eyvel: TEdit;
    GroupBoxStreamFunction: TGroupBox;
    ComboBox1: TComboBox;
    Editsfvalue: TEdit;
    LSFValue: TLabel;
    Label4: TLabel;
    procedure BapplyClick(Sender: TObject);
    procedure OnSelect(Sender: TObject);
    procedure TabControl1Change(Sender: TObject);
    procedure RadioGroup2Click(Sender: TObject);
    procedure RadioGroup1Click(Sender: TObject);
    procedure ComboBox1Change(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  BoundaryConditionForm: TBoundaryConditionForm;

implementation

uses
    MainUnit, GridGenUnit; // использует главный модуль

{$R *.dfm}

// задаёт граничное условие на выбранном ребре
procedure TBoundaryConditionForm.BapplyClick(Sender: TObject);
var
   ind : Integer; // какая граница выбрана

begin
   // код задания граничного условия
   // порядок нумерации границ
   // левая верхняя самая первая, а дальше
   // против часовой стрелки.
   ind:=EdgeComboBox.ItemIndex+1; // номер выбранной границы
   if (ind>0) then
   begin
      case TabControl1.TabIndex of
      0 : begin
             // Temperature - температура
             GridGenForm.edgelist[ind].temperaturecondition:=StrToFloat(Etemperature.Text); // температура
             // определение типа граничного условия
             case RadioGroup1.ItemIndex of
             0 : begin
                    // первого рода
                    // Задано значение температуры на границе
                    GridGenForm.edgelist[ind].temperatureclan:=1;
                    //GridGenForm.edgelist[ind].bsimmetry:=false;
                    //GridGenForm.edgelist[ind].boutflow:=false;
                    //GridGenForm.edgelist[ind].bpressure:=false;
                 end;
             1 : begin
                    // второго рода
                    // Задан тепловой поток на границе
                    GridGenForm.edgelist[ind].temperatureclan:=2;
                    //GridGenForm.edgelist[ind].bsimmetry:=false;
                    //GridGenForm.edgelist[ind].boutflow:=false;
                    //GridGenForm.edgelist[ind].bpressure:=false;
                 end;
              2 : begin
                     // выходная граница
                     // ставятся мягкие условия :
                     // T[i]=2T[i-1]-T[i-2];
                     GridGenForm.edgelist[ind].temperatureclan:=3;
                     //GridGenForm.edgelist[ind].bsimmetry:=false;
                     //GridGenForm.edgelist[ind].boutflow:=false;
                     //GridGenForm.edgelist[ind].bpressure:=true;
                  end;
              3 : begin
                     // граница симметрии
                     // внешняя нормаль равняется нулю
                     // T[i]=T[i-1]
                     GridGenForm.edgelist[ind].temperatureclan:=4;
                     //GridGenForm.edgelist[ind].bsimmetry:=true;
                     //GridGenForm.edgelist[ind].boutflow:=false;
                     //GridGenForm.edgelist[ind].bpressure:=false;
                  end;
             end;  // case
          end;
      1 : begin
             // Flow - скорость и давление
             case RadioGroup2.ItemIndex of
             0 : begin
                    // заданы компоненты скорости
                    GridGenForm.edgelist[ind].Vx:=StrToFloat(Exvel.Text); // горизонтальная скорость
                    GridGenForm.edgelist[ind].Vy:=StrToFloat(Eyvel.Text); // вртикальная скорость
                    GridGenForm.edgelist[ind].bsimmetry:=false;
                    GridGenForm.edgelist[ind].bpressure:=false;
                    GridGenForm.edgelist[ind].boutflow:=false;
                 end;
             1 : begin
                    // выходная граница потока
                    GridGenForm.edgelist[ind].bsimmetry:=false;
                    GridGenForm.edgelist[ind].bpressure:=false;
                    GridGenForm.edgelist[ind].boutflow:=true;
                    GridGenForm.edgelist[ind].Vx:=0.0;
                    GridGenForm.edgelist[ind].Vy:=0.0;
                 end;
             2 : begin
                    // граница симмметрии
                    GridGenForm.edgelist[ind].bsimmetry:=true;
                    GridGenForm.edgelist[ind].bpressure:=false;
                    GridGenForm.edgelist[ind].boutflow:=false;
                 end;
             3 : begin
                    // задано давление на границе
                    GridGenForm.edgelist[ind].bsimmetry:=false;
                    GridGenForm.edgelist[ind].bpressure:=true;
                    GridGenForm.edgelist[ind].boutflow:=false;
                    GridGenForm.edgelist[ind].rpressure:=StrToFloat(Exvel.Text); // значение давления на границе
                 end;
             end; // case

             // краевые условия для функции тока
             case ComboBox1.ItemIndex of
              0 : // const
                 begin
                    GridGenForm.edgelist[ind].chSFval:='c';
                    GridGenForm.edgelist[ind].rSFval:=StrToFloat(Editsfvalue.Text);
                 end;
              1 : // x
                 begin
                    GridGenForm.edgelist[ind].chSFval:='x';
                 end;
              2 : // y
                 begin
                    GridGenForm.edgelist[ind].chSFval:='y';
                 end;
              3 : // neiman
                 begin
                    GridGenForm.edgelist[ind].chSFval:='n';
                    GridGenForm.edgelist[ind].rSFval:=StrToFloat(Editsfvalue.Text);
                 end;
              end; // case

          end;
      end;

   end;
end; // задание граничного условия первого рода

// выбрана граница
procedure TBoundaryConditionForm.OnSelect(Sender: TObject);
var
   ind : Integer; // номер выбранной границы

begin
   // определяем номер выбранной границы
   ind:=EdgeComboBox.ItemIndex+1; // номер выбранной границы

   // выбрана анализируемая граница
   case TabControl1.TabIndex of
   0 : begin
          if (not (GridGenForm.edgelist[ind].boutflow) and
              not (GridGenForm.edgelist[ind].bpressure) and
              not (GridGenForm.edgelist[ind].bsimmetry) ) then
              begin
                 // условия по температуре
                 if (GridGenForm.edgelist[ind].temperatureclan=2) then
                      RadioGroup1.ItemIndex:=1  // второго рода
                  else RadioGroup1.ItemIndex:=0; // первого рода

                 GroupBox1.Visible:=true; // окошко где задаётся тепловой поток или температура
                 Etemperature.Text:=FloatToStr(GridGenForm.edgelist[ind].temperaturecondition); // температура
              end
               else
              begin
                 GroupBox1.Visible:=false; // окошко для ввода числового значения невидимо

                 if ((GridGenForm.edgelist[ind].boutflow) or
                    (GridGenForm.edgelist[ind].bpressure)) then
                       RadioGroup1.ItemIndex:=2; // выходная граница

                 if (GridGenForm.edgelist[ind].bsimmetry) then
                      RadioGroup1.ItemIndex:=3; // граница симметрии
              end;
       end;
   1 : begin
          // условия по скорости
          Exvel.Text:=FloatToStr(GridGenForm.edgelist[ind].Vx);  // горизонтальная скорость
          Eyvel.Text:=FloatToStr(GridGenForm.edgelist[ind].Vy);  // вертикальная скороть
       end;
   end;
end; // данный метод вызывается в случае выбора границы

// смена вкладки
procedure TBoundaryConditionForm.TabControl1Change(Sender: TObject);
begin
   case TabControl1.TabIndex of
   0 : begin
          if (Form1.imodelEquation <> 3) then
          begin
             // условия по температуре делаем видимыми
             // а условия по скорости делаем невидимыми.
             Panel3.Visible:=true;
             GroupBox2.Visible:=false;
          end;
       end;
   1 : begin
          if (Form1.imodelEquation>2) then
          begin
             // Набор решаемых уравнений включает уравнения Навье-Стокса
             // Условия по температуре невидимы, а условия по скорости видимы.
             Panel3.Visible:=false;
             GroupBox2.Visible:=true;
          end;
       end;
   end;
end;

// Реакция меню программы при задании граничных условий для течения
procedure TBoundaryConditionForm.RadioGroup2Click(Sender: TObject);
begin
    if ((RadioGroup2.ItemIndex = 1) or (RadioGroup2.ItemIndex = 2)) then
    begin
        // граница симметрии и надо скрыть вторую панель
        Panel4.Visible:=false;
    end
     else
    begin
       Panel4.Visible:=true;
    end;
    if (RadioGroup2.ItemIndex = 3) then
    begin
        // задаётся давление на границе
        Label1.Caption:='задано давление';
        Label2.Caption:='на границе';
        Label3.Visible:=false;
        Exvel.Text:='0'; // нулевое давление на выходной границе
        Eyvel.Visible:=false;
    end
     else
    begin
       // задаёется скорость нормальная к границе
       Label1.Caption:='скорость';
       Label2.Caption:='горизонтальная';
       Exvel.Text:='';
       Label3.Visible:=true;
       Eyvel.Visible:=true;
    end;
end;

procedure TBoundaryConditionForm.RadioGroup1Click(Sender: TObject);
begin
   if (RadioGroup1.ItemIndex>=2) then GroupBox1.Visible:=false
   else GroupBox1.Visible:=true;
end;

procedure TBoundaryConditionForm.ComboBox1Change(Sender: TObject);
begin
   // графическая визуализация выбора
   case ComboBox1.ItemIndex of
    0 : // const
       begin
          LSFValue.Visible:=true;
          Editsfvalue.Visible:=true;
       end;
    1 : // x
       begin
          LSFValue.Visible:=false;
          Editsfvalue.Visible:=false;
       end;
    2 : // y
       begin
          LSFValue.Visible:=false;
          Editsfvalue.Visible:=false;
       end;
    3 : // neiman
       begin
          LSFValue.Visible:=true;
          Editsfvalue.Visible:=true;
       end;
   end;
end;

end.
